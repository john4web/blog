<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gersti.at</title>
    <link>https://gersti.at/de/</link>
    <description>Recent content on gersti.at</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 12 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://gersti.at/de/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Das Adapter Pattern</title>
      <link>https://gersti.at/de/posts/adapter-pattern/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/adapter-pattern/</guid>
      <description>Dieser Blog Artikel erklÃ¤rt das GoF Adapter Design Pattern. Die Beispiele wurden in Java verfasst.
Visualisierung des Adapter-Patterns (Source: Refactoring-Guru)
Definition Link to heading Das ursprÃ¼ngliche GoF-Design-Pattern-Buch definiert das Adapter-Pattern wie folgt: &amp;ldquo;Converts the interface of a class into another interface clients expect. Adapter lets classes work together that couldn&amp;rsquo;t otherwise because of incompatible interfaces.&amp;rdquo;
Mit anderen Worten: Das Adapter-Pattern macht zwei Schnittstellen kompatibel, die nicht kompatibel sind.
Das Problem Link to heading Das Verhalten des Adaptees ist das eigentliche Verhalten, das ich haben mÃ¶chte.</description>
    </item>
    
    <item>
      <title>Polymorphie und dynamische Bindung</title>
      <link>https://gersti.at/de/posts/polymorphism/</link>
      <pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/polymorphism/</guid>
      <description>Durch seine FarbÃ¤nderung kann ein ChamÃ¤leon unterschiedliche ZustÃ¤nde annehmen â€“ Ã¤hnlich wie in der Programmierung ein Objekt (Quelle: Pexels).
Ãœberblick Link to heading Polymorphie ist neben Kapselung und Vererbung ein fundamentales Grundkonzept der objektorientierten Programmierung. Doch was ist Polymorphie genau? Dieser Blog-Artikel versucht diese Frage zu beantworten. GrundsÃ¤tzlich gibt es zwei Arten der Polymorphie - statische und dynamische Polymorphie.
Statische Polymorphie (Compile-Time Polymorphism) Link to heading Das ist normales Ã¼berladen von Methoden.</description>
    </item>
    
    <item>
      <title>Das Strategy Pattern</title>
      <link>https://gersti.at/de/posts/strategy-pattern/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/strategy-pattern/</guid>
      <description>Dieser Blog Artikel erklÃ¤rt das GoF Strategy Design Pattern. Die Beispiele wurden in Java verfasst.
Eine Ente kann fliegen, quacken (und wahrscheinlich kann sie noch viele andere Sachen). Image-Source: Pixabay
Welches Problem lÃ¶st das Strategy Pattern? Link to heading Angenommen, wir haben eine Duck-Klasse. Und dann haben wir eine CityDuck (die in der Stadt lebt) und eine WildDuck (die im Wald lebt). Wir verwenden Vererbung â€“ also CityDuck und WildDuck erben von Duck.</description>
    </item>
    
    <item>
      <title>Liskovsches Substitutionsprinzip und DbC im Detail</title>
      <link>https://gersti.at/de/posts/liskov-substitution-principle/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/liskov-substitution-principle/</guid>
      <description>Dieser Artikel ist derzeit leider nur auf Englisch verfÃ¼gbar! ðŸ˜… Klicke hier.</description>
    </item>
    
    <item>
      <title>Stream-API</title>
      <link>https://gersti.at/de/posts/stream-api/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/stream-api/</guid>
      <description>Dieser Artikel ist derzeit leider nur auf Englisch verfÃ¼gbar! ðŸ˜… Klicke hier.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gersti.at/de/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/about/</guid>
      <description>Hallo und herzlich willkommen auf meinem Blog! ðŸ˜„ Link to heading Mein Name ist Johannes Gerstbauer, und ich bin leidenschaftlicher Softwareentwickler aus Wien/Ã–sterreich mit einem besonderen Fokus auf objektorientierte Programmierung (OOP) in der Programmiersprache Java. Seit vielen Jahren fasziniert mich die Kunst, komplexe Probleme durch eleganten Code zu lÃ¶sen, und genau diese Faszination mÃ¶chte ich hier auf meinem Blog mit dir teilen.
Mein Job ðŸš€ Link to heading Akuelle arbeite ich als JVM Backend-Developer bei der Firma &amp;ldquo;Karriere.</description>
    </item>
    
  </channel>
</rss>
