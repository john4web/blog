<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gersti.at</title>
    <link>https://gersti.at/de/</link>
    <description>Recent content on gersti.at</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://gersti.at/de/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Das Strategy Pattern</title>
      <link>https://gersti.at/de/posts/strategy-pattern/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/strategy-pattern/</guid>
      <description>Dieser Blog Artikel erklÃ¤rt das GoF Strategy Design Pattern. Die Beispiele wurden in Java verfasst.
Eine Ente kann fliegen, quacken (und wahrscheinlich kann sie noch viele andere Sachen). Image-Source: Pixabay
Welches Problem lÃ¶st das Strategy Pattern? Link to heading Angenommen, wir haben eine Duck-Klasse. Und dann haben wir eine CityDuck (die in der Stadt lebt) und eine WildDuck (die im Wald lebt). Wir verwenden Vererbung â€“ also CityDuck und WildDuck erben von Duck.</description>
    </item>
    
    <item>
      <title>Liskovsches Substitutionsprinzip und DbC im Detail</title>
      <link>https://gersti.at/de/posts/liskov-substitution-principle/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/liskov-substitution-principle/</guid>
      <description>Dieser Artikel ist derzeit leider nur auf Englisch verfÃ¼gbar! ðŸ˜„</description>
    </item>
    
    <item>
      <title>Stream-API</title>
      <link>https://gersti.at/de/posts/stream-api/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/stream-api/</guid>
      <description>Dieser Artikel ist derzeit leider nur auf Englisch verfÃ¼gbar! ðŸ˜„</description>
    </item>
    
    <item>
      <title>Polymorphie und dynamische Bindung</title>
      <link>https://gersti.at/de/todo/polymorphism/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/todo/polymorphism/</guid>
      <description>Ãœberblick Link to heading Polymorphie ist neben Kapselung und Vererbung ein fundamentales Grundkonzept der objektorientierten Programmierung. Doch was ist Polymorphie genau? Und wann/wo sollte man polymorphen Code verwenden? Diese Blog-Artikel versucht diese Fragen zu beantworten.
In OOP ist jedes Objekt einer abgeleiteten Klasse auch gleichzeitig ein Objekt seiner Superklasse. Das heiÃŸt: Objektvariablen der Superklasse kann man Objekte der Subklasse zuweisen -&amp;gt; dadurch wird das Objekt &amp;ldquo;polymorph&amp;rdquo; (= Vielgestaltig).
Das folgende Codebeispiel zeigt ein polymorphes Objekt:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gersti.at/de/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/about/</guid>
      <description>Hallo und herzlich willkommen auf meinem Blog! ðŸ˜„ Link to heading Mein Name ist Johannes Gerstbauer, und ich bin leidenschaftlicher Softwareentwickler aus Wien/Ã–sterreich mit einem besonderen Fokus auf objektorientierte Programmierung (OOP) in der Programmiersprache Java. Seit vielen Jahren fasziniert mich die Kunst, komplexe Probleme durch eleganten Code zu lÃ¶sen, und genau diese Faszination mÃ¶chte ich hier auf meinem Blog mit dir teilen.
Mein Job ðŸš€ Link to heading Akuelle arbeite ich als JVM Backend-Developer bei der Firma &amp;ldquo;Karriere.</description>
    </item>
    
  </channel>
</rss>
