<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on gersti.at</title>
    <link>https://gersti.at/de/posts/</link>
    <description>Recent content in Posts on gersti.at</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://gersti.at/de/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Polymorphie und dynamische Bindung</title>
      <link>https://gersti.at/de/posts/polymorphism/</link>
      <pubDate>Sat, 05 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/polymorphism/</guid>
      <description>Der Mutant &amp;lsquo;Mystique&amp;rsquo; in X-Men kann verschiedene Gestalten annehmen. So wie auch ein Objekt in der Programmierung (Quelle: X-Men Movies Wiki).
Ãœberblick Link to heading Polymorphie ist neben Kapselung und Vererbung ein fundamentales Grundkonzept der objektorientierten Programmierung. Doch was ist Polymorphie genau? Dieser Blog-Artikel versucht diese Frage zu beantworten. GrundsÃ¤tzlich gibt es zwei Arten der Polymorphie - statische und dynamische Polymorphie.
Statische Polymorphie (Compile-Time Polymorphism) Link to heading Das ist normales Ã¼berladen von Methoden.</description>
    </item>
    
    <item>
      <title>Das Strategy Pattern</title>
      <link>https://gersti.at/de/posts/strategy-pattern/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/strategy-pattern/</guid>
      <description>Dieser Blog Artikel erklÃ¤rt das GoF Strategy Design Pattern. Die Beispiele wurden in Java verfasst.
Eine Ente kann fliegen, quacken (und wahrscheinlich kann sie noch viele andere Sachen). Image-Source: Pixabay
Welches Problem lÃ¶st das Strategy Pattern? Link to heading Angenommen, wir haben eine Duck-Klasse. Und dann haben wir eine CityDuck (die in der Stadt lebt) und eine WildDuck (die im Wald lebt). Wir verwenden Vererbung â€“ also CityDuck und WildDuck erben von Duck.</description>
    </item>
    
    <item>
      <title>Liskovsches Substitutionsprinzip und DbC im Detail</title>
      <link>https://gersti.at/de/posts/liskov-substitution-principle/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/liskov-substitution-principle/</guid>
      <description>Dieser Artikel ist derzeit leider nur auf Englisch verfÃ¼gbar! ðŸ˜… Klicke hier.</description>
    </item>
    
    <item>
      <title>Stream-API</title>
      <link>https://gersti.at/de/posts/stream-api/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/de/posts/stream-api/</guid>
      <description>Dieser Artikel ist derzeit leider nur auf Englisch verfÃ¼gbar! ðŸ˜… Klicke hier.</description>
    </item>
    
  </channel>
</rss>
