<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>johndoe</title>
    <link>https://john4web.github.io/blog/</link>
    <description>Recent content on johndoe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://john4web.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Liskov substitution principle in depth</title>
      <link>https://john4web.github.io/blog/posts/liskov-substitution-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://john4web.github.io/blog/posts/liskov-substitution-principle/</guid>
      <description>This blog post offers a detailed explanation of the liskov substitution principle and gives an overview of the rules you should follow as a software engineer when dealing with inheritance in object-oriented programming to produce clean code. The following is a summary of some sources I have read however also includes my own opinion on that topic. Code examples are written in Java.
Overview Link to heading The Liskov Substitution Principle (LSP) was first introduced by Barbara Liskov in 1987 in her article &amp;ldquo;Data Abstraction and Hierarchy&amp;rdquo; and is one of the five SOLID design principles of object-oriented programming.</description>
    </item>
    
    <item>
      <title>The Builder Pattern</title>
      <link>https://john4web.github.io/blog/posts/builder-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://john4web.github.io/blog/posts/builder-pattern/</guid>
      <description>This blog post offers an explanation of Builder Design Pattern by Gang of Four. The examples are written in java.
Intent Link to heading &amp;ldquo;Separate the construction of a complex object from its representation so that the same construction process can create different representations.&amp;rdquo;
Visualization of the Builder Pattern (Source: Refactoring-Guru)
Overview Link to heading The builder pattern is classified as &amp;ldquo;creational pattern&amp;rdquo; which means that it deals with the creation of an object.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://john4web.github.io/blog/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://john4web.github.io/blog/about/</guid>
      <description>hello</description>
    </item>
    
  </channel>
</rss>
