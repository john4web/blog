<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gersti.at</title>
    <link>https://gersti.at/</link>
    <description>Recent content on gersti.at</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 24 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://gersti.at/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5 best OOP principles</title>
      <link>https://gersti.at/posts/top-oop-principles/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/top-oop-principles/</guid>
      <description> 1. Encapsulate what Varies! Link to heading 2. Program to an interface, not to an implementation! Link to heading 3. Favor composition over inheritance! Link to heading 4. Don&amp;rsquo;t call us! We&amp;rsquo;ll call you! (Hollywood Principle) Link to heading 5. Increase cohesion and decrease coupling! Link to heading 6. Don&amp;rsquo;t depend on volatile things! Link to heading </description>
    </item>
    
    <item>
      <title>Arrange - Act - Assert</title>
      <link>https://gersti.at/posts/arrange-act-assert/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/arrange-act-assert/</guid>
      <description>Testing Paradigma</description>
    </item>
    
    <item>
      <title>Aspect Oriented Programming</title>
      <link>https://gersti.at/posts/aop/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/aop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cohesion vs. Coupling</title>
      <link>https://gersti.at/posts/cohesion-and-coupling/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/cohesion-and-coupling/</guid>
      <description>Overview Link to heading https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29
https://jesusgilhernandez.com/2012/11/28/cohesion-and-coupling/
https://www.linkedin.com/pulse/why-product-development-design-needs-sushant-randive
Pragmatic programmer schreibt in mehreren Kapiteln darüber. insbesondere auf seite 138
meinen blog beitrag namens &amp;ldquo;law of demeter&amp;rdquo; hier verlinken</description>
    </item>
    
    <item>
      <title>Command-Query-Responsibility-Segregation (CQRS)</title>
      <link>https://gersti.at/posts/cqrs/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/cqrs/</guid>
      <description>Command and Query Separation Principle
Idempotent and Unidempotent Endpoints</description>
    </item>
    
    <item>
      <title>Component Principles</title>
      <link>https://gersti.at/posts/component-principles/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/component-principles/</guid>
      <description>Aus dem Buch &amp;ldquo;Clean Architecture&amp;rdquo;
CRP: The Common Reuse Principle Link to heading CCP: The Common Closure Principle Link to heading ADP: Acyclic Dependencies Principle Link to heading SDP: Stable Dependencies Principle Link to heading SAP: Stable Abstractions Principle Link to heading </description>
    </item>
    
    <item>
      <title>Controlling Flow via Try-Catch</title>
      <link>https://gersti.at/posts/controlling-flow-via-try-catch/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/controlling-flow-via-try-catch/</guid>
      <description>Explain why it is not a good idea</description>
    </item>
    
    <item>
      <title>Conways Law</title>
      <link>https://gersti.at/posts/conways-law/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/conways-law/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Deadlocks</title>
      <link>https://gersti.at/posts/deadlocks/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/deadlocks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dependency Inversion Principle</title>
      <link>https://gersti.at/posts/dependency-inversion-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/dependency-inversion-principle/</guid>
      <description>Overview Link to heading auch über inversion of control und dependency injection schreiben.
https://www.youtube.com/watch?v=TkUhAbbRCAE
https://www.youtube.com/watch?v=SeN1s65tRHY</description>
    </item>
    
    <item>
      <title>Different variables and their names</title>
      <link>https://gersti.at/posts/variable-names/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/variable-names/</guid>
      <description>Overview Link to heading Unterschiedliche Variablennamen erklären: Instanzvariable Membervariable Klassenvariable Objektvariable Primitive Variable Statische Variable etc.</description>
    </item>
    
    <item>
      <title>Divide and Conquer</title>
      <link>https://gersti.at/posts/divide-and-conquer/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/divide-and-conquer/</guid>
      <description>Evtl. mit merge Sort erklären</description>
    </item>
    
    <item>
      <title>Domain Driven Design (DDD)</title>
      <link>https://gersti.at/posts/domain-driven-design/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/domain-driven-design/</guid>
      <description></description>
    </item>
    
    <item>
      <title>DRY Principle</title>
      <link>https://gersti.at/posts/dry-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/dry-principle/</guid>
      <description>Overview Link to heading With examples
Pragmatic programmer auf S.26 und vielen anderen seiten auch.</description>
    </item>
    
    <item>
      <title>Duck Typing</title>
      <link>https://gersti.at/posts/duck-typing/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/duck-typing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Elasticsearch Basics</title>
      <link>https://gersti.at/posts/elasticsearch-basics/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/elasticsearch-basics/</guid>
      <description>What is Elasticsearch? Link to heading Elasticsearch is a search engine written in java. You can think of it as a very fast/performant database, which is specialized on search capabilities (full-text search) and indexing large volumes of data. It allows users to perform complex queries, filter and aggregate data
Why using Elasticsearch? Link to heading Why do people use Elasticsearch at all instead of a relational database like MySQL? Because Elasticsearch is much more performant and optimized for search functionalities.</description>
    </item>
    
    <item>
      <title>Favor Composition Over Inheritance!</title>
      <link>https://gersti.at/posts/favor-composition-over-inheritance/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/favor-composition-over-inheritance/</guid>
      <description>Overview Link to heading https://www.youtube.com/watch?v=C3B5IIlt4-0
https://www.youtube.com/watch?v=7hXi0N1oWFU
https://www.youtube.com/watch?v=J9WZ4xs4Tkc
https://www.youtube.com/watch?v=FdFBYUQCuHQ
https://www.youtube.com/watch?v=OMPfEXIlTVE</description>
    </item>
    
    <item>
      <title>Heisenbug!</title>
      <link>https://gersti.at/posts/heisenbug/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/heisenbug/</guid>
      <description>https://de.wikipedia.org/wiki/Heisenbug
https://thedailyomnivore.net/2012/11/30/heisenbug/
This is what a classic Heisenbug looks like (Source: The Daily Omnivore).</description>
    </item>
    
    <item>
      <title>How does the JVM work?</title>
      <link>https://gersti.at/posts/jvm-explained/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/jvm-explained/</guid>
      <description>Also explain how kotlin gets compiled to java class files</description>
    </item>
    
    <item>
      <title>Interface Segregation Principle</title>
      <link>https://gersti.at/posts/interface-segregation-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/interface-segregation-principle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java21: What&#39;s new?</title>
      <link>https://gersti.at/posts/java-21-whats-new/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/java-21-whats-new/</guid>
      <description>Records (Java 14 - Java 16) Link to heading Sealed Classes (Java 15 - Java 17) Link to heading String Templates (Java 21 preview feature) Link to heading Pattern Matching Link to heading Virtual Threads Link to heading Sequenced Collections Link to heading Key Encapsulation Mechanism API Link to heading Scoped Values Link to heading Record Patterns Link to heading Simplified Main Method Link to heading https://medium.com/@aydinserbest34/a-look-at-java-21s-simplified-main-method-684a2cd2e6b5
Reference Link to heading https://www.</description>
    </item>
    
    <item>
      <title>JUnit Anntoations Overview</title>
      <link>https://gersti.at/posts/junit-annotations/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/junit-annotations/</guid>
      <description>@Mock @MockBean @InjectMocks @Spy @SpyBean &amp;hellip;</description>
    </item>
    
    <item>
      <title>KISS Principle</title>
      <link>https://gersti.at/posts/kiss-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/kiss-principle/</guid>
      <description>Overview Link to heading With examples</description>
    </item>
    
    <item>
      <title>Later is the day that never comes!</title>
      <link>https://gersti.at/posts/later/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/later/</guid>
      <description>Fixing stuff later in Software Engineering (Source: Twitter Post from Vlad Mihalcea).</description>
    </item>
    
    <item>
      <title>Liskov substitution principle and DbC in depth</title>
      <link>https://gersti.at/posts/liskov-substitution-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/liskov-substitution-principle/</guid>
      <description>This blog post offers a detailed explanation of the liskov substitution principle and gives an overview of the rules you should follow as a software engineer when dealing with inheritance in object-oriented programming to produce clean code. The following is a summary of some sources I have read however also includes my own opinion on that topic. Code examples are written in Java.
Overview Link to heading The Liskov Substitution Principle (LSP) was first introduced by Barbara Liskov in 1987 in her article &amp;ldquo;Data Abstraction and Hierarchy&amp;rdquo; and is one of the five SOLID design principles of object-oriented programming.</description>
    </item>
    
    <item>
      <title>Multithreading methods in depth</title>
      <link>https://gersti.at/posts/multithreading/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/multithreading/</guid>
      <description>Overview Link to heading CompletableFutures and Threadpools in Java explained
https://entwickler.de/reader/reading/java-magazin/4.2015/22da1a0ef7024ddb436dd9e6
Threadpools and ThreadPoolTaskExecutor() explained
Java CompletableFuture vs. Java Future
Spring WebFlux
Java ExecutorService
Java Multithreading
Java Virtual Threads
https://www.youtube.com/watch?v=xpjvY45Hbyg</description>
    </item>
    
    <item>
      <title>My personal GIT Cheatsheet</title>
      <link>https://gersti.at/posts/git-cheatsheet/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/git-cheatsheet/</guid>
      <description>sachen hier rauskopieren: nobledesktop.com/learn/git/undo-changes</description>
    </item>
    
    <item>
      <title>My personal REGEX Cheatsheet</title>
      <link>https://gersti.at/posts/regex-cheatsheet/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/regex-cheatsheet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MySQL Best practices</title>
      <link>https://gersti.at/posts/mysql-best-practices/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/mysql-best-practices/</guid>
      <description>Hier einfach diesen kostenlosen Videokurs zusammenfassen von: https://planetscale.com/learn/courses/mysql-for-developers
und dann auch noch meine Mitschriften aus dem Studium einfließen lassen.</description>
    </item>
    
    <item>
      <title>Open Closed Principle</title>
      <link>https://gersti.at/posts/open-closed-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/open-closed-principle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Optimistic vs. Pessimistic Locking</title>
      <link>https://gersti.at/posts/optimistic-pessimistic-locking/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/optimistic-pessimistic-locking/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Pair Programming: The right way</title>
      <link>https://gersti.at/posts/pair-programming/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/pair-programming/</guid>
      <description>https://martinfowler.com/articles/on-pair-programming.html?ref=simplermachines.com
https://martinfowler.com/articles/rotate-pairs-experiment.html
https://martinfowler.com/bliki/PairProgramming.html
https://www.martinfowler.com/bliki/PairProgrammingMisconceptions.html
Über Driver und Navigator Role schreiben</description>
    </item>
    
    <item>
      <title>Polymorphie und dynamische Bindung</title>
      <link>https://gersti.at/posts/polymorphism/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/polymorphism/</guid>
      <description>Overview Link to heading Unbedingt meine Mitschrift aus dem Studium hier rein geben!
With examples
Folgende Videos unbedingt anschauen:
https://www.youtube.com/watch?v=YaSMkzmc_sA
Auch schreiben über &amp;ldquo;Static polymorphism vs. dynamic polymorphism&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Principle of least astonishment</title>
      <link>https://gersti.at/posts/pola/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/pola/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Public constructors vs. Static Factory Methods</title>
      <link>https://gersti.at/posts/public-constructors-static-factory-methods/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/public-constructors-static-factory-methods/</guid>
      <description>Aus dem Buch Effective Java von Joshua Bloch</description>
    </item>
    
    <item>
      <title>Rubber Duck Debugging</title>
      <link>https://gersti.at/posts/rubber-duck-debugging/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/rubber-duck-debugging/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Rule of Ten</title>
      <link>https://gersti.at/posts/rule-of-ten/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/rule-of-ten/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Separation of Concerns</title>
      <link>https://gersti.at/posts/separation-of-concerns/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/separation-of-concerns/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://gersti.at/posts/sharding/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/sharding/</guid>
      <description>Sharding (Servers, Databases, etc.)</description>
    </item>
    
    <item>
      <title>Single Responsibility Principle</title>
      <link>https://gersti.at/posts/single-responsibility-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/single-responsibility-principle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Strangler Fig Pattern</title>
      <link>https://gersti.at/posts/strangler-fig-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/strangler-fig-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>strategic-, functional and object-oriented programming</title>
      <link>https://gersti.at/posts/strategic-functional-object/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/strategic-functional-object/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stream API</title>
      <link>https://gersti.at/posts/stream-api/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/stream-api/</guid>
      <description>Overview Link to heading Java Streams were introduced in Java 8 and are a very powerful concept. They provide a set of functions that you can perform on certain data structures. They allow you to quickly and conveniently perform operations on them. Streams themselves are not data structures and they do not modify the underlying data structures they are operating on.
Streams do all the heavy lifting for you.</description>
    </item>
    
    <item>
      <title>TDD Basics</title>
      <link>https://gersti.at/posts/tdd-basics/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/tdd-basics/</guid>
      <description>First make it work (you are out of business if it does not work)
Then make it right (refactor the code so that you and others can understand it and evolve it as needs change or are better understood)
Then make it fast (Refactor the code for needed performance)
Inhalte vom Buch TDD vom Kent Beck hier einfließen lassen.</description>
    </item>
    
    <item>
      <title>Tell Don&#39;t Ask Principle</title>
      <link>https://gersti.at/posts/tell-dont-ask-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/tell-dont-ask-principle/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Abstract Factory Pattern</title>
      <link>https://gersti.at/posts/abstract-factory-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/abstract-factory-pattern/</guid>
      <description>an abstract factory is a set of factory methods. an abstract factory makes use of multiple factory methods.
The single difference between the factory method pattern and the abstract factory pattern is that the factory method pattern constructs a single object and the abstract factory constructs multiple objects.
Bei dem Factory Method Pattern erzeugt jede konkrete Factory jeweils nur ein Objekt. Das ist der Unterschied zum Abstract-Factory-Pattern. Beim Abstract-Factory-Pattern erzeugt jede konkrete Factory mehrere unterschiedliche Objekte.</description>
    </item>
    
    <item>
      <title>The Adapter Pattern</title>
      <link>https://gersti.at/posts/adapter-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/adapter-pattern/</guid>
      <description>Visualization of the Adapter Pattern (Source: Refactoring-Guru)
Intent Link to heading Converts the interface of a class into another interface clients expect. Adapter lets classes work together that couldn&amp;rsquo;t otherwise because of incompatible interfaces.
In other words: Making two interfaces compatible, that aren&amp;rsquo;t compatible.
The Problem Link to heading The behaviour of the Adaptee is the actual behavior that I want. But I cant get to that behavior using the actual interface that I have.</description>
    </item>
    
    <item>
      <title>The Billion Dollar Mistake: NULL</title>
      <link>https://gersti.at/posts/billion-dollar-mistake/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/billion-dollar-mistake/</guid>
      <description>Overview Link to heading Zusammenfassung aus diesem Video schreiben: https://www.youtube.com/watch?v=o3aNJX7AP3M
The billion dollar mistake (Tony Hoare) https://www.youtube.com/watch?v=YYkOWzrO3xg
Da passt auch recht gut das Kapitel &amp;ldquo;Dead programs tell no lies&amp;rdquo; dazu vom Buch &amp;ldquo;The pragmatic programmer&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Bridge Pattern</title>
      <link>https://gersti.at/posts/bridge-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/bridge-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Broken Windows Theory in Software Engineering</title>
      <link>https://gersti.at/posts/broken-windows/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/broken-windows/</guid>
      <description>Wird im Buch &amp;ldquo;Pragmatic Programmer&amp;rdquo; erklärt.
Auch drüber schreiben, dass man &amp;ldquo;Fenster&amp;rdquo;, die man nicht sofort fixen kann, auch mit einem TODO kommentar versehen kann. Also ein &amp;ldquo;Achtung&amp;rdquo; schild markiert, das anzeigt dass es bald gefixt wird. Aber: nur todo kommentare mit Ticketnummern sind erlaubt.</description>
    </item>
    
    <item>
      <title>The Builder Pattern</title>
      <link>https://gersti.at/posts/builder-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/builder-pattern/</guid>
      <description>This blog post offers an explanation of Builder Design Pattern by Gang of Four. The examples are written in java.
Intent Link to heading &amp;ldquo;Separate the construction of a complex object from its representation so that the same construction process can create different representations.&amp;rdquo;
Visualization of the Builder Pattern (Source: Refactoring-Guru)
Overview Link to heading The builder pattern is classified as &amp;ldquo;creational pattern&amp;rdquo; which means that it deals with the creation of an object.</description>
    </item>
    
    <item>
      <title>The Chain of Responsibility Pattern</title>
      <link>https://gersti.at/posts/chain-of-responsibility-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/chain-of-responsibility-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Clean Architecture</title>
      <link>https://gersti.at/posts/clean-architecture/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/clean-architecture/</guid>
      <description>Über Seiten 201 - 210 und S. 303 - 322 im Buch &amp;ldquo;Clean Architecture&amp;rdquo; schreiben.</description>
    </item>
    
    <item>
      <title>The Command Pattern</title>
      <link>https://gersti.at/posts/command-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/command-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Composite Pattern</title>
      <link>https://gersti.at/posts/composite-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/composite-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Decorator Pattern</title>
      <link>https://gersti.at/posts/decorator-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/decorator-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Facade Pattern</title>
      <link>https://gersti.at/posts/facade-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/facade-pattern/</guid>
      <description>plumbing , isolation, foundation, wiring, electricity, pipes, etc.
underneath the facade of a house we have a lot of complex, difficult to understand stuff happening. But we dont want to deal with all that stuff. That&amp;rsquo;s why we are creating a facade.
Law of demeter Link to heading </description>
    </item>
    
    <item>
      <title>The Factory Method Pattern</title>
      <link>https://gersti.at/posts/factory-method-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/factory-method-pattern/</guid>
      <description>Overview Link to heading The Factory Method Design Pattern is oftentimes just called &amp;ldquo;Factory Pattern&amp;rdquo;. However to be specific, it is called &amp;ldquo;Factory Method design Pattern&amp;rdquo; in the original GoF Book.
A sketch depicting an example of the Factory Method Pattern (Source: Refactoring-Guru). We have a LogisticsFactory that creates logistics. It has two Subfactories. The one factory creates Trucks and the other factory creates ships.
Intent Link to heading Define an interface for creating an object, but let subclasses decide which class to instantiate.</description>
    </item>
    
    <item>
      <title>The Flyweight Pattern</title>
      <link>https://gersti.at/posts/flyweight-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/flyweight-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Interpreter Pattern</title>
      <link>https://gersti.at/posts/interpreter-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/interpreter-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Iterator Pattern</title>
      <link>https://gersti.at/posts/iterator-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/iterator-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The law of demeter</title>
      <link>https://gersti.at/posts/law-of-demeter/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/law-of-demeter/</guid>
      <description>Principle of least knowledge - only talk to your immediate friends
Shy code -&amp;gt; don&amp;rsquo;t reveal yourself to others and don&amp;rsquo;t interact with too many people
Pragmatic programmer schreibt in mehreren Kapiteln darüber. insbesondere auf seite 138</description>
    </item>
    
    <item>
      <title>The Mediator Pattern</title>
      <link>https://gersti.at/posts/mediator-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/mediator-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Memento Pattern</title>
      <link>https://gersti.at/posts/memento-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/memento-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Observer Pattern</title>
      <link>https://gersti.at/posts/observer-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/observer-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The only constant in Software Engineering</title>
      <link>https://gersti.at/posts/only-constant/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/only-constant/</guid>
      <description>&amp;hellip; is CHANGE</description>
    </item>
    
    <item>
      <title>The Prototype Pattern</title>
      <link>https://gersti.at/posts/prototype-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/prototype-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Proxy Pattern</title>
      <link>https://gersti.at/posts/proxy-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/proxy-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Robustness Principle</title>
      <link>https://gersti.at/posts/robustness-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/robustness-principle/</guid>
      <description>&amp;ldquo;be conservative in what you do, be liberal in what you accept from others&amp;rdquo;</description>
    </item>
    
    <item>
      <title>The Service Layer Pattern</title>
      <link>https://gersti.at/posts/service-layer-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/service-layer-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Singleton Pattern</title>
      <link>https://gersti.at/posts/singleton-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/singleton-pattern/</guid>
      <description>Many people argue that Singleton is an anti pattern. That it is a code smell.
A comic depicting the Singleton Pattern (Source: Refactoring-Guru). Singleton ensures that there is only ONE single instance of an Object. Clients may not even realize that they’re working with the same object all the time.
Intent Link to heading Das Singleton Pattern wird dann verwendet, wenn man von einer Klasse nur eine einzige Instanz erzeugen möchte.</description>
    </item>
    
    <item>
      <title>The State Pattern</title>
      <link>https://gersti.at/posts/state-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/state-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Strategy Pattern</title>
      <link>https://gersti.at/posts/strategy-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/strategy-pattern/</guid>
      <description>This blog post offers an explanation of Strategy Design Pattern by Gang of Four. The examples are written in Java.
A duck can fly and quack (and can do probably much more things). Image-Source: Pixabay
The Problem that the strategy pattern solves Link to heading Let&amp;rsquo;s say we have a Duck class. And then we have a CityDuck (living in the city) and a WildDuck (living in the forest). We use inheritance – so CityDuck and WildDuck inherit from Duck.</description>
    </item>
    
    <item>
      <title>The Template Method Pattern</title>
      <link>https://gersti.at/posts/template-method-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/template-method-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Visitor Pattern</title>
      <link>https://gersti.at/posts/visitor-pattern/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/visitor-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tracer Bullets</title>
      <link>https://gersti.at/posts/tracer-bullets/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/tracer-bullets/</guid>
      <description>Über Tracer bullets schreiben vom Buch: Pragmatic Programmer</description>
    </item>
    
    <item>
      <title>UML Basics</title>
      <link>https://gersti.at/posts/uml-basics/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/uml-basics/</guid>
      <description>Overview Link to heading UML basics explained and shown in images (associations, composition, etc.)</description>
    </item>
    
    <item>
      <title>What is an abstraction?</title>
      <link>https://gersti.at/posts/abstraction/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/abstraction/</guid>
      <description></description>
    </item>
    
    <item>
      <title>YAGNI Principle</title>
      <link>https://gersti.at/posts/yagni-principle/</link>
      <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/posts/yagni-principle/</guid>
      <description>Overview Link to heading With examples</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gersti.at/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gersti.at/about/</guid>
      <description>Hello and welcome to my blog! 😄 Link to heading My name is Johannes Gerstbauer, and I am a passionate software developer from Vienna/Austria, with a special focus on object-oriented programming (OOP) in Java. For many years, I have been fascinated by the art of solving complex problems through elegant code, and I want to share this fascination with you here on my blog.
My Job 🚀 Link to heading Currently, I work as a JVM Backend Developer at &amp;ldquo;Karriere.</description>
    </item>
    
  </channel>
</rss>
